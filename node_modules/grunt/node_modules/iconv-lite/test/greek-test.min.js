var vows=require("vows"),assert=require("assert"),iconv=require(__dirname+"/../"),baseStrings={empty:"",hi:"Γειά!",ascii:"\x00\b	\n\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",greek:"αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίόύώΆΈΉΊΌΎΏϊϋΪΫ",untranslatable:"Åçþÿ¿"},encodings=[{name:"windows1253",variations:["windows-1253","win-1253","win1253","cp1253","cp-1253",1253],encodedStrings:{empty:new Buffer(""),hi:new Buffer("ÃåéÜ!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),greek:new Buffer("áâãäåæçèéêëìíîïðñóôõö÷øùÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÓÔÕÖ×ØÙÜÝÞßüýþ¢¸¹º¼¾¿úûÚÛ","binary")}},{name:"iso88597",variations:["iso-8859-7","greek","greek8","cp28597","cp-28597",28597],encodedStrings:{empty:new Buffer(""),hi:new Buffer("ÃåéÜ!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),greek:new Buffer("áâãäåæçèéêëìíîïðñóôõö÷øùÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÓÔÕÖ×ØÙÜÝÞßüýþ¶¸¹º¼¾¿úûÚÛ","binary")}},{name:"cp737",variations:["cp-737",737],encodedStrings:{empty:new Buffer(""),hi:new Buffer(" á!","binary"),ascii:new Buffer(baseStrings.ascii,"binary"),greek:new Buffer(" ¡¢£¤¥¦§¨©«¬­®¯àáâãåæçéêëìíîïðäèôõ","binary")}}],testsBatch={};encodings.forEach(function(e){var n=e.variations[0],t="hi",r={"Convert to empty buffer":function(){assert.strictEqual(iconv.toEncoding("",n).toString("binary"),new Buffer("").toString("binary"))},"Convert from empty buffer":function(){assert.strictEqual(iconv.fromEncoding(new Buffer(""),n),"")},"Convert from buffer":function(){for(var t in e.encodedStrings)assert.strictEqual(iconv.fromEncoding(e.encodedStrings[t],n),baseStrings[t])},"Convert to buffer":function(){for(var t in e.encodedStrings)assert.strictEqual(iconv.toEncoding(baseStrings[t],n).toString("binary"),e.encodedStrings[t].toString("binary"))},"Try different variations of encoding":function(){e.variations.forEach(function(n){assert.strictEqual(iconv.fromEncoding(e.encodedStrings[t],n),baseStrings[t]),assert.strictEqual(iconv.toEncoding(baseStrings[t],n).toString("binary"),e.encodedStrings[t].toString("binary"))})},"Untranslatable chars are converted to defaultCharSingleByte":function(){var e=baseStrings.untranslatable.split("").map(function(e){return iconv.defaultCharSingleByte}).join("");assert.strictEqual(iconv.toEncoding(baseStrings.untranslatable,n).toString("binary"),e)}};testsBatch[e.name+":"]=r}),vows.describe("Test Greek encodings").addBatch(testsBatch)["export"](module);