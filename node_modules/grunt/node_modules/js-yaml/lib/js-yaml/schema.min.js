"use strict";function compileList(e,n,t){var r=[];return e.include.forEach(function(e){t=compileList(e,n,t)}),e[n].forEach(function(e){t.forEach(function(n,t){n.tag===e.tag&&r.push(t)}),t.push(e)}),t.filter(function(e,n){return-1===r.indexOf(n)})}function compileMap(){function r(n){e[n.tag]=n}var n,t,e={};for(n=0,t=arguments.length;t>n;n+=1)arguments[n].forEach(r);return e}function Schema(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(e){if(null!==e.loader&&"string"!==e.loader.kind)throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=compileList(this,"implicit",[]),this.compiledExplicit=compileList(this,"explicit",[]),this.compiledTypeMap=compileMap(this.compiledImplicit,this.compiledExplicit)}var common=require("./common"),YAMLException=require("./exception"),Type=require("./type");Schema.DEFAULT=null,Schema.create=function(){var e,n;switch(arguments.length){case 1:e=Schema.DEFAULT,n=arguments[0];break;case 2:e=arguments[0],n=arguments[1];break;default:throw new YAMLException("Wrong number of arguments for Schema.create function")}if(e=common.toArray(e),n=common.toArray(n),!e.every(function(e){return e instanceof Schema}))throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!n.every(function(e){return e instanceof Type}))throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new Schema({include:e,explicit:n})},module.exports=Schema;