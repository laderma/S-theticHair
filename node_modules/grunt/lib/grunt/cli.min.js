"use strict";var grunt=require("../grunt"),path=require("path"),nopt=require("nopt"),cli=module.exports=function(e,n){e&&Object.keys(e).forEach(function(n){n in cli.options?cli.optlist[n].type===Array&&[].push.apply(cli.options[n],e[n]):cli.options[n]=e[n]}),grunt.tasks(cli.tasks,cli.options,n)},optlist=cli.optlist={help:{"short":"h",info:"Display this help text.",type:Boolean},base:{info:"Specify an alternate base path. By default, all file paths are relative to the Gruntfile. (grunt.file.setBase) *",type:path},color:{info:"Disable colored output.",type:Boolean,negate:!0},gruntfile:{info:"Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories for the nearest Gruntfile.js or Gruntfile.coffee file.",type:path},debug:{"short":"d",info:"Enable debugging mode for tasks that support it.",type:[Number,Boolean]},stack:{info:"Print a stack trace when exiting with a warning or fatal error.",type:Boolean},force:{"short":"f",info:"A way to force your way past warnings. Want a suggestion? Don't use this option, fix your code.",type:Boolean},tasks:{info:'Additional directory paths to scan for task and "extra" files. (grunt.loadTasks) *',type:Array},npm:{info:'Npm-installed grunt plugins to scan for task and "extra" files. (grunt.loadNpmTasks) *',type:Array},write:{info:"Disable writing files (dry run).",type:Boolean,negate:!0},verbose:{"short":"v",info:"Verbose mode. A lot more information output.",type:Boolean},version:{"short":"V",info:"Print the grunt version. Combine with --verbose for more info.",type:Boolean},completion:{info:"Output shell auto-completion rules. See the grunt-cli documentation for more information.",type:String}},aliases={},known={};Object.keys(optlist).forEach(function(e){var n=optlist[e]["short"];n&&(aliases[n]="--"+e),known[e]=optlist[e].type});var parsed=nopt(known,aliases,process.argv,2);cli.tasks=parsed.argv.remain,cli.options=parsed,delete parsed.argv,Object.keys(optlist).forEach(function(e){optlist[e].type!==Array||e in cli.options||(cli.options[e]=[])});