"use strict";var semver=require("semver"),shell=require("shelljs");module.exports=function(n){function e(e,t){return n.template.process(e,{delimiters:"bump",data:t})}function t(e,t){n.log.writeln("Committing "+e.join(", ")+" with message: "+t),a("git commit -m '"+t+"' '"+e.join("' '")+"'")}function r(e,t){n.log.writeln("Tagging "+e+" with message: "+t),a("git tag '"+e+"' -m '"+t+"'")}function a(e){if(n.option("no-write"))n.verbose.writeln("Not actually running: "+e);else{n.verbose.writeln("Running: "+e);var t=shell.exec(e,{silent:!0});0!==t.code&&n.log.error("Error ("+t.code+") "+t.output)}}n.registerTask("bump","Bump the version property of a JSON file.",function(){var a=["major","minor","patch","prerelease"],i=[];if(this.args.forEach(function(e){var t=[];a.forEach(function(n){0===n.indexOf(e)&&t.push(n)}),0===t.length?n.log.error('Error: mode "'+e+'" does not match any known modes.'):t.length>1?n.log.error('Error: mode "'+e+'" is ambiguous (possibly: '+t.join(", ")+")."):i.push(t[0])}),0===this.errorCount&&0===i.length&&n.log.error("Error: no modes specified."),this.errorCount>0)throw n.log.error("Valid modes are: "+a.join(", ")+"."),new Error("Use valid modes (or unambiguous mode abbreviations).");var s=this.options({filepaths:["package.json"],syncVersions:!1,commit:!0,commitMessage:"Bumping version to {%= version %}.",tag:!0,tagName:"v{%= version %}",tagMessage:"Version {%= version %}",tagPrerelease:!1}),o=Array.isArray(s.filepaths)?s.filepaths:[s.filepaths],l={};o.forEach(function(e){var t=n.file.readJSON(e),r=t.version,a=Object.keys(l)[0];s.syncVersions&&a&&(t.version=a),i.forEach(function(n){var e=t.version,r=semver.parse(t.version);r.inc(n),t.version=String(r),/-/.test(e)&&"patch"===n&&(t.version=t.version.replace(/\d+$/,function(n){return n-1})),/-/.test(e)||"prerelease"!==n||(r.inc("patch"),r.inc("prerelease"),t.version=String(r))}),l[r]?l[r].filepaths.push(e):l[r]={version:t.version,filepaths:[e]},n.log.write("Bumping version in "+e+" from "+r+" to "+t.version+"..."),n.file.write(e,JSON.stringify(t,null,2)),n.log.ok()}),s.commit&&Object.keys(l).forEach(function(n){var r=l[n];t(r.filepaths,e(s.commitMessage,{version:r.version,origVersion:n}))});var u=l[Object.keys(l)[0]].version;s.tag&&(s.tagPrerelease||-1===i.indexOf("prerelease")?r(e(s.tagName,{version:u}),e(s.tagMessage,{version:u})):n.log.writeln("Not tagging (prerelease version).")),this.errorCount>0&&n.warn("There were errors.")}),n.template.addDelimiters("bump","{%","%}")};