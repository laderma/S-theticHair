var expect=require("expect.js"),cheerio=require("..");describe("$(...)",function(){describe(".css",function(){it("(prop): should return a css property value",function(){var n=cheerio('<li style="hai: there">');expect(n.css("hai")).to.equal("there")}),it("([prop1, prop2]): should return the specified property values as an object",function(){var n=cheerio('<li style="margin: 1px; padding: 2px; color: blue;">');expect(n.css(["margin","color"])).to.eql({margin:"1px",color:"blue"})}),it("(prop, val): should set a css property",function(){var n=cheerio('<li style="margin: 0;"></li><li></li>');n.css("color","red"),expect(n.attr("style")).to.equal("margin: 0; color: red;"),expect(n.eq(1).attr("style")).to.equal("color: red;")}),it('(prop, ""): should unset a css property',function(){var n=cheerio('<li style="padding: 1px; margin: 0;">');n.css("padding",""),expect(n.attr("style")).to.equal("margin: 0;")}),it("(prop): should not mangle embedded urls",function(){var n=cheerio('<li style="background-image:url(http://example.com/img.png);">');expect(n.css("background-image")).to.equal("url(http://example.com/img.png)")}),it("(prop): should ignore blank properties",function(){var n=cheerio('<li style=":#ccc;color:#aaa;">');expect(n.css()).to.eql({color:"#aaa"})}),it("(prop): should ignore blank values",function(){var n=cheerio('<li style="color:;position:absolute;">');expect(n.css()).to.eql({position:"absolute"})}),describe("(prop, function):",function(){beforeEach(function(){this.$el=cheerio('<div style="margin: 0;"></div><div style="margin: 0;"></div><div style="margin: 0;">')}),it("should iterate over the selection",function(){var n=0,e=this.$el;this.$el.css("margin",function(r,t){expect(r).to.equal(n),expect(t).to.equal(e[n]),expect(this).to.equal(e[n]),n++}),expect(n).to.equal(3)}),it("should set each attribute independently",function(){var n=["4px","",void 0];this.$el.css("margin",function(e){return n[e]}),expect(this.$el.eq(0).attr("style")).to.equal("margin: 4px;"),expect(this.$el.eq(1).attr("style")).to.equal(""),expect(this.$el.eq(2).attr("style")).to.equal("margin: 0;")})}),it("(obj): should set each key and val",function(){var n=cheerio('<li style="padding: 0;"></li><li></li>');n.css({foo:0}),expect(n.eq(0).attr("style")).to.equal("padding: 0; foo: 0;"),expect(n.eq(1).attr("style")).to.equal("foo: 0;")}),describe("parser",function(){it("should allow any whitespace between declarations",function(){var n=cheerio('<li style="one 	:\n 0;\n two \f\r: 1">');expect(n.css(["one","two"])).to.eql({one:0,two:1})})})})});