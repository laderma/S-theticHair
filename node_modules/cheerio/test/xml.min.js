var expect=require("expect.js"),_=require("lodash"),cheerio=require(".."),xml=function(n,e){e=_.extend({xmlMode:!0},e);var t=cheerio.load(n,e);return t.xml()},dom=function(n,e){var t=cheerio.load("",e);return t(n).html()};describe("render",function(){describe("(xml)",function(){it("should render <media:thumbnail /> tags correctly",function(){var n='<media:thumbnail url="http://www.foo.com/keyframe.jpg" width="75" height="50" time="12:05:01.123" />';expect(xml(n)).to.equal('<media:thumbnail url="http://www.foo.com/keyframe.jpg" width="75" height="50" time="12:05:01.123"/>')}),it("should render <link /> tags (RSS) correctly",function(){var n="<link>http://www.github.com/</link>";expect(xml(n)).to.equal("<link>http://www.github.com/</link>")})}),describe("(dom)",function(){it("should keep camelCase for new nodes",function(){var n='<g><someElem someAttribute="something">hello</someElem></g>';expect(dom(n,{xmlMode:!1})).to.equal('<someelem someattribute="something">hello</someelem>')}),it("should keep camelCase for new nodes",function(){var n='<g><someElem someAttribute="something">hello</someElem></g>';expect(dom(n,{xmlMode:!0})).to.equal('<someElem someAttribute="something">hello</someElem>')}),it("should maintain the parsing options of distinct contexts independently",function(){var n='<g><someElem someAttribute="something">hello</someElem></g>',e=cheerio.load("",{xmlMode:!1});expect(e(n).html()).to.equal('<someelem someattribute="something">hello</someelem>')})})});