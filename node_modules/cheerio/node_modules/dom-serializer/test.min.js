function testBody(e){it("should render <br /> tags correctly",function(){var n="<br />";expect(e(n)).to.equal("<br>")}),it("should retain encoded HTML content within attributes",function(){var n='<hr class="cheerio &amp; node = happy parsing" />';expect(e(n)).to.equal('<hr class="cheerio &amp; node = happy parsing">')}),it('should shorten the "checked" attribute when it contains the value "checked"',function(){var n="<input checked/>";expect(e(n)).to.equal("<input checked>")}),it('should not shorten the "name" attribute when it contains the value "name"',function(){var n='<input name="name"/>';expect(e(n)).to.equal('<input name="name">')}),it("should render comments correctly",function(){var n="<!-- comment -->";expect(e(n)).to.equal("<!-- comment -->")}),it("should render whitespace by default",function(){var n='<a href="./haha.html">hi</a> <a href="./blah.html">blah</a>';expect(e(n)).to.equal(n)}),it("should normalize whitespace if specified",function(){var n='<a href="./haha.html">hi</a> <a href="./blah.html">blah  </a>';expect(e(n,{normalizeWhitespace:!0})).to.equal('<a href="./haha.html">hi</a> <a href="./blah.html">blah </a>')}),it("should preserve multiple hyphens in data attributes",function(){var n='<div data-foo-bar-baz="value"></div>';expect(e(n)).to.equal('<div data-foo-bar-baz="value"></div>')}),it("should not encode characters in script tag",function(){var n='<script>alert("hello world")</script>';expect(e(n)).to.equal(n)}),it("should not encode json data",function(){var n='<script>var json = {"simple_value": "value", "value_with_tokens": "&quot;here & \'there\'&quot;"};</script>';expect(e(n)).to.equal(n)})}var expect=require("expect.js"),defaultOpts=require("cheerio").prototype.options,_=require("lodash"),parse=require("cheerio/lib/parse"),render=require("./index.js"),html=function(e,n,t){t=_.defaults(t||{},_.defaults(e,defaultOpts));var r=parse(n,t);return render(r,t)},xml=function(e,n){n=_.defaults(n||{},defaultOpts),n.xmlMode=!0;var t=parse(e,n);return render(t,n)};describe("render",function(){describe("(html)",function(){var e=_.partial(html,{});it("should handle double quotes within single quoted attributes properly",function(){var n="<hr class='an \"edge\" case' />";expect(e(n)).to.equal('<hr class="an &quot;edge&quot; case">')})}),describe("(html, {})",_.partial(testBody,_.partial(html,{}))),describe("(html, {decodeEntities: false})",_.partial(testBody,_.partial(html,{decodeEntities:!1}))),describe("(xml)",function(){it("should render CDATA correctly",function(){var e="<a> <b> <![CDATA[ asdf&asdf ]]> <c/> <![CDATA[ asdf&asdf ]]> </b> </a>";expect(xml(e)).to.equal(e)})})});