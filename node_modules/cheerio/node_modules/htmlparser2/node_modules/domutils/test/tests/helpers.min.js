var makeDom=require("../utils").makeDom,helpers=require("../.."),assert=require("assert");describe("helpers",function(){describe("removeSubsets",function(){var e=helpers.removeSubsets,n=makeDom("<div><p><span></span></p><p></p></div>")[0];it("removes identical trees",function(){var t=e([n,n]);assert.equal(t.length,1)}),it("Removes subsets found first",function(){var t=e([n,n.children[0].children[0]]);assert.equal(t.length,1)}),it("Removes subsets found last",function(){var t=e([n.children[0],n]);assert.equal(t.length,1)}),it("Does not remove unique trees",function(){var t=e([n.children[0],n.children[1]]);assert.equal(t.length,2)})}),describe("compareDocumentPosition",function(){var e=helpers.compareDocumentPosition,n="<div><p><span></span></p><a></a></div>",t=makeDom(n)[0],r=t.children[0],i=r.children[0],a=t.children[1];it("reports when the first node occurs before the second indirectly",function(){assert.equal(e(i,a),2)}),it("reports when the first node contains the second",function(){assert.equal(e(r,i),10)}),it("reports when the first node occurs after the second indirectly",function(){assert.equal(e(a,i),4)}),it("reports when the first node is contained by the second",function(){assert.equal(e(i,r),20)}),it("reports when the nodes belong to separate documents",function(){var t=makeDom(n)[0].children[0].children[0];assert.equal(e(i,t),1)}),it("reports when the nodes are identical",function(){assert.equal(e(i,i),0)})}),describe("uniqueSort",function(){var n,t,r,i,e=helpers.uniqueSort;beforeEach(function(){n=makeDom("<div><p><span></span></p><a></a></div>")[0],t=n.children[0],r=t.children[0],i=n.children[1]}),it("leaves unique elements untouched",function(){assert.deepEqual(e([t,i]),[t,i])}),it("removes duplicate elements",function(){assert.deepEqual(e([t,i,t]),[t,i])}),it("sorts nodes in document order",function(){assert.deepEqual(e([i,n,r,t]),[n,t,r,i])})})});