function jsonify(e){return JSON.stringify(e,null,2)}function bangString(e,n){return"string"==typeof n?n+"!":n}var Sinon=require("sinon"),stringify=require("..");describe("Stringify",function(){it("must stringify circular objects",function(){var e={name:"Alice"};e.self=e;var n=stringify(e,null,2);n.must.eql(jsonify({name:"Alice",self:"[Circular ~]"}))}),it("must stringify circular objects with intermediaries",function(){var e={name:"Alice"};e.identity={self:e};var n=stringify(e,null,2);n.must.eql(jsonify({name:"Alice",identity:{self:"[Circular ~]"}}))}),it("must stringify circular objects deeper",function(){var e={name:"Alice",child:{name:"Bob"}};e.child.self=e.child,stringify(e,null,2).must.eql(jsonify({name:"Alice",child:{name:"Bob",self:"[Circular ~.child]"}}))}),it("must stringify circular objects deeper with intermediaries",function(){var e={name:"Alice",child:{name:"Bob"}};e.child.identity={self:e.child},stringify(e,null,2).must.eql(jsonify({name:"Alice",child:{name:"Bob",identity:{self:"[Circular ~.child]"}}}))}),it("must stringify circular objects in an array",function(){var e={name:"Alice"};e.self=[e,e],stringify(e,null,2).must.eql(jsonify({name:"Alice",self:["[Circular ~]","[Circular ~]"]}))}),it("must stringify circular objects deeper in an array",function(){var e={name:"Alice",children:[{name:"Bob"},{name:"Eve"}]};e.children[0].self=e.children[0],e.children[1].self=e.children[1],stringify(e,null,2).must.eql(jsonify({name:"Alice",children:[{name:"Bob",self:"[Circular ~.children.0]"},{name:"Eve",self:"[Circular ~.children.1]"}]}))}),it("must stringify circular arrays",function(){var e=[];e.push(e),e.push(e);var n=stringify(e,null,2);n.must.eql(jsonify(["[Circular ~]","[Circular ~]"]))}),it("must stringify circular arrays with intermediaries",function(){var e=[];e.push({name:"Alice",self:e}),e.push({name:"Bob",self:e}),stringify(e,null,2).must.eql(jsonify([{name:"Alice",self:"[Circular ~]"},{name:"Bob",self:"[Circular ~]"}]))}),it("must stringify repeated objects in objects",function(){var e={},n={name:"Alice"};e.alice1=n,e.alice2=n,stringify(e,null,2).must.eql(jsonify({alice1:{name:"Alice"},alice2:{name:"Alice"}}))}),it("must stringify repeated objects in arrays",function(){var e={name:"Alice"},n=[e,e],t=stringify(n,null,2);t.must.eql(jsonify([{name:"Alice"},{name:"Alice"}]))}),it("must call given decycler and use its output",function(){var e={};e.a=e,e.b=e;var n=Sinon.spy(function(){return n.callCount}),t=stringify(e,null,2,n);t.must.eql(jsonify({a:1,b:2},null,2)),n.callCount.must.equal(2),n.thisValues[0].must.equal(e),n.args[0][0].must.equal("a"),n.args[0][1].must.equal(e),n.thisValues[1].must.equal(e),n.args[1][0].must.equal("b"),n.args[1][1].must.equal(e)}),it("must call replacer and use its output",function(){var e={name:"Alice",child:{name:"Bob"}},n=Sinon.spy(bangString),t=stringify(e,n,2);t.must.eql(jsonify({name:"Alice!",child:{name:"Bob!"}})),n.callCount.must.equal(4),n.args[0][0].must.equal(""),n.args[0][1].must.equal(e),n.thisValues[1].must.equal(e),n.args[1][0].must.equal("name"),n.args[1][1].must.equal("Alice"),n.thisValues[2].must.equal(e),n.args[2][0].must.equal("child"),n.args[2][1].must.equal(e.child),n.thisValues[3].must.equal(e.child),n.args[3][0].must.equal("name"),n.args[3][1].must.equal("Bob")}),it("must call replacer after describing circular references",function(){var e={name:"Alice"};e.self=e;var n=Sinon.spy(bangString),t=stringify(e,n,2);t.must.eql(jsonify({name:"Alice!",self:"[Circular ~]!"})),n.callCount.must.equal(3),n.args[0][0].must.equal(""),n.args[0][1].must.equal(e),n.thisValues[1].must.equal(e),n.args[1][0].must.equal("name"),n.args[1][1].must.equal("Alice"),n.thisValues[2].must.equal(e),n.args[2][0].must.equal("self"),n.args[2][1].must.equal("[Circular ~]")}),it("must call given decycler and use its output for nested objects",function(){var e={};e.a=e,e.b={self:e};var n=Sinon.spy(function(){return n.callCount}),t=stringify(e,null,2,n);t.must.eql(jsonify({a:1,b:{self:2}})),n.callCount.must.equal(2),n.args[0][0].must.equal("a"),n.args[0][1].must.equal(e),n.args[1][0].must.equal("self"),n.args[1][1].must.equal(e)}),it("must use decycler's output when it returned null",function(){function n(){return null}var e={a:"b"};e.self=e,e.selves=[e,e],stringify(e,null,2,n).must.eql(jsonify({a:"b",self:null,selves:[null,null]}))}),it("must use decycler's output when it returned undefined",function(){function n(){}var e={a:"b"};e.self=e,e.selves=[e,e],stringify(e,null,2,n).must.eql(jsonify({a:"b",selves:[null,null]}))}),it("must throw given a decycler that returns a cycle",function(){function t(e,n){return n}var e={};e.self=e;var n;try{stringify(e,null,2,t)}catch(r){n=r}n.must.be.an["instanceof"](TypeError)}),describe(".getSerialize",function(){it("must stringify circular objects",function(){var e={a:"b"};e.circularRef=e,e.list=[e,e];var n=JSON.stringify(e,stringify.getSerialize(),2);n.must.eql(jsonify({a:"b",circularRef:"[Circular ~]",list:["[Circular ~]","[Circular ~]"]}))}),xit("must return a function that could be called twice",function(){var e={name:"Alice"};e.self=e;var n,t=stringify.getSerialize();n=JSON.stringify(e,t,2),n.must.eql(jsonify({name:"Alice",self:"[Circular ~]"})),n=JSON.stringify(e,t,2),n.must.eql(jsonify({name:"Alice",self:"[Circular ~]"}))})})});