function readNext(e,n){var t=ctype.ruint32(e,"big",n);n+=4;var r=n+t;return{data:e.slice(n,r),offset:r}}function writeInt(e,n){e.writeByte(2),e.writeLength(n.length);for(var t=0;t<n.length;t++)e.writeByte(n[t]);return e}function rsaToPEM(e){var n,t,r,a,i,l,u,s="",o=0;try{if(n=new Buffer(e.split(" ")[1],"base64"),u=readNext(n,o),l=u.data.toString(),o=u.offset,"ssh-rsa"!==l)throw new Error("Invalid ssh key type: "+l);u=readNext(n,o),r=u.data,o=u.offset,u=readNext(n,o),i=u.data}catch(c){throw new Error("Invalid ssh key: "+e)}for(t=new asn1.BerWriter,t.startSequence(),t.startSequence(),t.writeOID("1.2.840.113549.1.1.1"),t.writeNull(),t.endSequence(),t.startSequence(3),t.writeByte(0),t.startSequence(),writeInt(t,i),writeInt(t,r),t.endSequence(),t.endSequence(),t.endSequence(),u=t.buffer.toString("base64"),a=0;a<u.length;a++)a%64===0&&(s+="\n"),s+=u.charAt(a);return/\\n$/.test(s)||(s+="\n"),"-----BEGIN PUBLIC KEY-----"+s+"-----END PUBLIC KEY-----\n"}function dsaToPEM(e){var n,r,a,s,o,l,u,c,t=0,i="";try{if(n=new Buffer(e.split(" ")[1],"base64"),r=readNext(n,t),s=r.data.toString(),t=r.offset,!/^ssh-ds[as].*/.test(s))throw new Error("Invalid ssh key type: "+s);r=readNext(n,t),o=r.data,t=r.offset,r=readNext(n,t),l=r.data,t=r.offset,r=readNext(n,t),u=r.data,t=r.offset,r=readNext(n,t),c=r.data}catch(f){throw console.log(f.stack),new Error("Invalid ssh key: "+e)}a=new asn1.BerWriter,a.startSequence(),a.startSequence(),a.writeOID("1.2.840.10040.4.1"),a.startSequence(),writeInt(a,o),writeInt(a,l),writeInt(a,u),a.endSequence(),a.endSequence(),a.startSequence(3),a.writeByte(0),writeInt(a,c),a.endSequence(),a.endSequence(),r=a.buffer.toString("base64");for(var d=0;d<r.length;d++)d%64===0&&(i+="\n"),i+=r.charAt(d);return/\\n$/.test(i)||(i+="\n"),"-----BEGIN PUBLIC KEY-----"+i+"-----END PUBLIC KEY-----\n"}var assert=require("assert-plus"),crypto=require("crypto"),asn1=require("asn1"),ctype=require("ctype");module.exports={sshKeyToPEM:function(e){if(assert.string(e,"ssh_key"),/^ssh-rsa.*/.test(e))return rsaToPEM(e);if(/^ssh-ds[as].*/.test(e))return dsaToPEM(e);throw new Error("Only RSA and DSA public keys are allowed")},fingerprint:function(e){assert.string(e,"ssh_key");var n=e.split(" ");if(!n||!n.length||n.length<2)throw new Error("invalid ssh key");var t=new Buffer(n[1],"base64"),r=crypto.createHash("md5");r.update(t);for(var a=r.digest("hex"),i="",s=0;s<a.length;s++)s&&s%2===0&&(i+=":"),i+=a[s];return i},pemToRsaSSHKey:function(e,n){assert.equal("string",typeof e,"typeof pem");var t=e.split("\n").slice(1,-2).join(""),r=new Buffer(t,"base64"),a=new asn1.BerReader(r);a.readSequence(),a.readSequence();var i=a.readOID();assert.equal(i,"1.2.840.113549.1.1.1","pem not in RSA format"),a.readByte(),a.readByte(),a.readSequence(3),a.readByte(),a.readSequence(),assert.equal(a.peek(),asn1.Ber.Integer,"modulus not an integer"),a._offset=a.readLength(a.offset+1);var s=a._buf.slice(a.offset,a.offset+a.length);a._offset+=a.length,assert.equal(a.peek(),asn1.Ber.Integer,"exponent not an integer"),a._offset=a.readLength(a.offset+1);var o=a._buf.slice(a.offset,a.offset+a.length);a._offset+=a.length;var l=new Buffer("ssh-rsa"),u=new Buffer(4+l.length+4+s.length+4+o.length),c=0;u.writeUInt32BE(l.length,c),c+=4,l.copy(u,c),c+=l.length,u.writeUInt32BE(o.length,c),c+=4,o.copy(u,c),c+=o.length,u.writeUInt32BE(s.length,c),c+=4,s.copy(u,c),c+=s.length;var f=l.toString()+" "+u.toString("base64")+" "+(n||"");return f}};