function MissingHeaderError(e){this.name="MissingHeaderError",this.message=e,this.stack=(new Error).stack}function InvalidAlgorithmError(e){this.name="InvalidAlgorithmError",this.message=e,this.stack=(new Error).stack}function _pad(e){return parseInt(e,10)<10&&(e="0"+e),e}function _rfc1123(){var e=new Date,n=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];return t[e.getUTCDay()]+", "+_pad(e.getUTCDate())+" "+n[e.getUTCMonth()]+" "+e.getUTCFullYear()+" "+_pad(e.getUTCHours())+":"+_pad(e.getUTCMinutes())+":"+_pad(e.getUTCSeconds())+" GMT"}var assert=require("assert-plus"),crypto=require("crypto"),http=require("http"),sprintf=require("util").format,Algorithms={"rsa-sha1":!0,"rsa-sha256":!0,"rsa-sha512":!0,"dsa-sha1":!0,"hmac-sha1":!0,"hmac-sha256":!0,"hmac-sha512":!0},Authorization='Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';MissingHeaderError.prototype=new Error,InvalidAlgorithmError.prototype=new Error,module.exports={signRequest:function(e,n){if(assert.object(e,"request"),assert.object(n,"options"),assert.optionalString(n.algorithm,"options.algorithm"),assert.string(n.keyId,"options.keyId"),assert.optionalArrayOfString(n.headers,"options.headers"),assert.optionalString(n.httpVersion,"options.httpVersion"),e.getHeader("Date")||e.setHeader("Date",_rfc1123()),n.headers||(n.headers=["date"]),n.algorithm||(n.algorithm="rsa-sha256"),n.httpVersion||(n.httpVersion="1.1"),n.algorithm=n.algorithm.toLowerCase(),!Algorithms[n.algorithm])throw new InvalidAlgorithmError(n.algorithm+" is not supported");var t,r="";for(t=0;t<n.headers.length;t++){if("string"!=typeof n.headers[t])throw new TypeError("options.headers must be an array of Strings");var a=n.headers[t].toLowerCase();if("request-line"!==a){var i=e.getHeader(a);if(!i)throw new MissingHeaderError(a+" was not in the request");r+=a+": "+i}else r+=e.method+" "+e.path+" HTTP/"+n.httpVersion;t+1<n.headers.length&&(r+="\n")}var o,s=n.algorithm.match(/(hmac|rsa)-(\w+)/);if("hmac"===s[1]){var l=crypto.createHmac(s[2].toUpperCase(),n.key);l.update(r),o=l.digest("base64")}else{var u=crypto.createSign(n.algorithm.toUpperCase());u.update(r),o=u.sign(n.key,"base64")}return e.setHeader("Authorization",sprintf(Authorization,n.keyId,n.algorithm,n.headers.join(" "),o)),!0}};