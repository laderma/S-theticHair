var Dgram=require("dgram"),Lab=require("lab"),Sntp=require("../lib"),internals={},expect=Lab.expect,before=Lab.before,after=Lab.after,describe=Lab.experiment,it=Lab.test;describe("SNTP",function(){describe("#time",function(){it("returns consistent result over multiple tries",function(e){Sntp.time(function(n,t){expect(n).to.not.exist,expect(t).to.exist;var r=t.t;Sntp.time(function(n,t){expect(n).to.not.exist,expect(t).to.exist;var i=t.t;expect(Math.abs(r-i)).is.below(200),e()})})}),it("resolves reference IP",function(e){Sntp.time({host:"ntp.exnet.com",resolveReference:!0},function(n,t){expect(n).to.not.exist,expect(t).to.exist,expect(t.referenceHost).to.exist,e()})}),it("times out on no response",function(e){Sntp.time({port:124,timeout:100},function(n,t){expect(n).to.exist,expect(t).to.not.exist,expect(n.message).to.equal("Timeout"),e()})}),it("errors on error event",function(e){var n=Dgram.createSocket;Dgram.createSocket=function(e){Dgram.createSocket=n;var t=Dgram.createSocket(e);return process.nextTick(function(){t.emit("error",new Error("Fake"))}),t},Sntp.time(function(n,t){expect(n).to.exist,expect(t).to.not.exist,expect(n.message).to.equal("Fake"),e()})}),it("times out on invalid host",function(e){Sntp.time({host:"error",timeout:1e4},function(n,t){expect(n).to.exist,expect(t).to.not.exist,expect(n.message).to.equal("getaddrinfo ENOTFOUND"),e()})}),it("fails on bad response buffer size",function(e){var n=Dgram.createSocket("udp4");n.on("message",function(e,t){var e=new Buffer(10);n.send(e,0,e.length,t.port,t.address,function(e,t){n.close()})}),n.bind(49123),Sntp.time({host:"localhost",port:49123},function(n,t){expect(n).to.exist,expect(n.message).to.equal("Invalid server response"),e()})});var e=function(e){var n=Dgram.createSocket("udp4");n.on("message",function(t,r){for(var t=new Buffer([36,1,0,227,0,0,0,0,0,0,0,0,65,67,84,83,212,168,45,199,28,93,73,27,212,168,45,230,103,239,157,178,212,168,45,230,113,237,181,251,212,168,45,230,113,238,108,197]),i=0,a=e.length;a>i;++i)t[e[i][0]]=e[i][1];n.send(t,0,t.length,r.port,r.address,function(e,t){n.close()})}),n.bind(49123)};it("fails on bad version",function(n){e([[0,28]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.version).to.equal(3),expect(e.message).to.equal("Invalid server response"),n()})}),it("fails on bad originate timestamp and alarm li",function(n){e([[0,228]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(e.message).to.equal("Wrong originate timestamp"),expect(t.leapIndicator).to.equal("alarm"),n()})}),it("returns time with death stratum and last61 li",function(n){e([[0,100],[1,0]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(t.stratum).to.equal("death"),expect(t.leapIndicator).to.equal("last-minute-61"),n()})}),it("returns time with reserved stratum and last59 li",function(n){e([[0,164],[1,31]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(t.stratum).to.equal("reserved"),expect(t.leapIndicator).to.equal("last-minute-59"),n()})}),it("fails on bad mode (symmetric-active)",function(n){e([[0,33]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.mode).to.equal("symmetric-active"),n()})}),it("fails on bad mode (symmetric-passive)",function(n){e([[0,34]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.mode).to.equal("symmetric-passive"),n()})}),it("fails on bad mode (client)",function(n){e([[0,35]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.mode).to.equal("client"),n()})}),it("fails on bad mode (broadcast)",function(n){e([[0,37]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.mode).to.equal("broadcast"),n()})}),it("fails on bad mode (reserved)",function(n){e([[0,38]]),Sntp.time({host:"localhost",port:49123},function(e,t){expect(e).to.exist,expect(t.mode).to.equal("reserved"),n()})})}),describe("#offset",function(){it("gets the current offset",function(e){Sntp.offset(function(n,t){expect(n).to.not.exist,expect(t).to.not.equal(0),e()})}),it("gets the current offset from cache",function(e){Sntp.offset(function(n,t){expect(n).to.not.exist,expect(t).to.not.equal(0);var r=t;Sntp.offset({},function(n,t){expect(n).to.not.exist,expect(t).to.equal(r),e()})})}),it("fails getting the current offset on invalid server",function(e){Sntp.offset({host:"error"},function(n,t){expect(n).to.exist,expect(t).to.equal(0),e()})})}),describe("#now",function(){it("starts auto-sync, gets now, then stops",function(e){Sntp.stop();var n=Sntp.now();expect(n).to.equal(Date.now()),Sntp.start(function(){var n=Sntp.now();expect(n).to.not.equal(Date.now()),Sntp.stop(),e()})}),it("starts twice",function(e){Sntp.start(function(){Sntp.start(function(){var n=Sntp.now();expect(n).to.not.equal(Date.now()),Sntp.stop(),e()})})}),it("starts auto-sync, gets now, waits, gets again after timeout",function(e){Sntp.stop();var n=Sntp.now();expect(n).to.equal(Date.now()),Sntp.start({clockSyncRefresh:100},function(){var n=Sntp.now();expect(n).to.not.equal(Date.now()),expect(n).to.equal(Sntp.now()),setTimeout(function(){expect(Sntp.now()).to.not.equal(n),Sntp.stop(),e()},110)})})})});