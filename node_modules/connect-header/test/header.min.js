module=QUnit.module,QUnit.module("connect-header"),test("import",function(){ok(require("../lib"),"index.js"),ok(require("../lib/header.js"),"header.js")});var header=require("../lib");test("arguments",function(){throws(function(){header([])},Error,"invalid: []"),ok(header(),"valid: undefined"),ok(header(null),"valid: null"),ok(header(0),"valid: 0"),ok(header(!1),"valid: false")});var MockRequest=function(){},MockResponse=function(n){n=n||{},this._h=n,this.setHeader=function(n,e){this._h[n]=e},this.removeHeader=function(n){delete this._h[n]},this.toString=function(){return JSON.stringify(this._h)}};test("result",function(){expect(6);var n=new MockRequest,e=function(){ok(!0,"next called")},t=new MockResponse,r={},a=header(r);a(n,t,e),equal(t.toString(),JSON.stringify(r),"do nothing"),t=new MockResponse,r={"x-k0":"v0","x-k1":"v1"},a=header(r),a(n,t,e),equal(t.toString(),JSON.stringify(r),"set header x-k0, x-k1"),t=new MockResponse({"x-k0":"v0","x-k1":"v1"}),r={"x-k1":null},a=header(r),a(n,t,e),equal(t.toString(),JSON.stringify({"x-k0":"v0"}),"remove header x-k1")});