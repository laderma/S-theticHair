function utf16beEncoder(e){return{write:utf16beEncoderWrite,end:function(){}}}function utf16beEncoderWrite(e){for(var n=new Buffer(e,"ucs2"),t=0;t<n.length;t+=2){var r=n[t];n[t]=n[t+1],n[t+1]=r}return n}function utf16beDecoder(e){return{write:utf16beDecoderWrite,end:function(){},overflowByte:-1}}function utf16beDecoderWrite(e){if(0==e.length)return"";var n=new Buffer(e.length+1),t=0,r=0;for(-1!==this.overflowByte&&(n[0]=e[0],n[1]=this.overflowByte,t=1,r=2);t<e.length-1;t+=2,r+=2)n[r]=e[t+1],n[r+1]=e[t];return this.overflowByte=t==e.length-1?e[e.length-1]:-1,n.slice(0,r).toString("ucs2")}function utf16Encoder(e){e=e||{};var n=this.getCodec(e.use||"utf-16be");if(!n.bom)throw new Error("iconv-lite: in UTF-16 encoder, 'use' parameter should be either UTF-16BE or UTF16-LE.");return{write:utf16EncoderWrite,end:utf16EncoderEnd,bom:n.bom,internalEncoder:n.encoder(e)}}function utf16EncoderWrite(e){var n=this.internalEncoder.write(e);return this.bom&&(n=Buffer.concat([this.bom,n]),this.bom=null),n}function utf16EncoderEnd(){return this.internalEncoder.end()}function utf16Decoder(e){return{write:utf16DecoderWrite,end:utf16DecoderEnd,internalDecoder:null,initialBytes:[],initialBytesLen:0,options:e||{},getCodec:this.getCodec}}function utf16DecoderWrite(e){return this.internalDecoder?this.internalDecoder.write(e):(this.initialBytes.push(e),this.initialBytesLen+=e.length,this.initialBytesLen<16?"":utf16DecoderDecideEndianness.call(this))}function utf16DecoderEnd(){if(this.internalDecoder)return this.internalDecoder.end();var n,e=utf16DecoderDecideEndianness.call(this);return this.internalDecoder&&(n=this.internalDecoder.end()),n&&n.length>0?e+n:e}function utf16DecoderDecideEndianness(){var e=Buffer.concat(this.initialBytes);if(this.initialBytes.length=this.initialBytesLen=0,e.length<2)return"";var n=this.options["default"]||"utf-16be";if(254==e[0]&&255==e[1])n="utf-16be",e=e.slice(2);else if(255==e[0]&&254==e[1])n="utf-16le",e=e.slice(2);else{for(var t=[0,0],r=Math.min(e.length-e.length%2,64),i=0;r>i;i+=2)0==e[i]&&32==e[i+1]&&t[0]++,32==e[i]&&0==e[i+1]&&t[1]++;t[0]>0&&0==t[1]?n="utf-16be":0==t[0]&&t[1]>0&&(n="utf-16le")}return this.internalDecoder=this.getCodec(n).decoder(this.options),this.internalDecoder.write(e)}exports.utf16be=function(e){return{encoder:utf16beEncoder,decoder:utf16beDecoder,bom:new Buffer([254,255])}},exports.utf16=function(e){return{encoder:utf16Encoder,decoder:utf16Decoder,getCodec:e.iconv.getCodec}};