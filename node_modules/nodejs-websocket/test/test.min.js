"use strict";function getClient(){return testClient.removeAllListeners(),testClient}function getBuffer(n){var t,e=new Buffer(n);for(t=0;n>t;t++)e[t]=t%256;return e}function compareBuffers(n,e){var t;for(n.length.should.be.equal(e.length),t=0;t<n.length;t++)n[t].should.be.equal(e[t])}function getServer(n,e){testConn.removeAllListeners(),n&&testConn.on("text",n),e&&testConn.on("binary",e)}require("should");var ws=require("../index"),net=require("net"),TEST_PORT=8017,testServer,testClient,testConn;describe("text frames",function(){before(function(n){testServer=ws.createServer(function(n){testConn=n}).listen(TEST_PORT,function(){testClient=ws.connect("ws://localhost:"+TEST_PORT,n)})}),after(function(n){testClient.close(),testServer.socket.close(n)}),it("should connect to a websocket server",function(n){var e=getClient();e.sendText("test string"),e.on("text",function(e){e.should.be.equal("TEST STRING"),n()}),getServer(function(n){this.sendText(n.toUpperCase())})}),it("should deliver texts in order",function(n){var e=["First","Second","Third"],t=0,r=getClient();e.forEach(r.sendText,r),getServer(function(r){r.should.be.equal(e[t]),t++,t===e.length&&n()})}),it("should send binary data",function(n){var e=getClient(),t=getBuffer(17);e.sendBinary(t),getServer(null,function(e){e.on("readable",function(){compareBuffers(e.read(),t)}),e.on("end",n)})}),it("should stream binary data",function(n){var e=getClient(),t=getBuffer(1024),r=!0;ws.setBinaryFragmentation(1024);var a=e.beginBinary();a.write(t),getServer(null,function(e){e.on("readable",function(){var n=e.read();n&&(compareBuffers(n,t),r&&(a.end(t),r=!1))}),e.on("end",n)})}),it("should not accept concurrent text with binary",function(){var n=getClient(),e=n.beginBinary();(function(){n.sendText("Hi")}).should["throw"](),e.end(),getServer()}),it("should expose the headers",function(){var n=getClient();n.headers.should.have.property("upgrade","websocket"),n.headers.should.have.property("connection","Upgrade"),n.headers.should.have.property("sec-websocket-accept")})}),describe("handshake",function(){before(function(n){testServer=ws.createServer(function(n){testConn=n,n.sendText("hello")}).listen(TEST_PORT,n)}),after(function(n){testServer.socket.close(n)}),it("should work when the handshake response is followed by a WS frame",function(n){ws.connect("ws://127.0.0.1:"+TEST_PORT,function(){this.on("text",function(e){e.should.be.equal("hello"),this.close(),n()})})}),it("should work when there is some missing headers",function(n){var e=net.connect(TEST_PORT);e.write("GET / HTTP/1.1\r\nHost: localhost\r\nSec-websocket-key: key\r\nC: 3\r\nD: 4\r\nE: 5\r\n\r\n"),e.once("close",function(){n()})})});