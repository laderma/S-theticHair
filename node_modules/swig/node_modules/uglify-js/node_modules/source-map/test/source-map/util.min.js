if("function"!=typeof define)var define=require("amdefine")(module,require);define(function(e,n,t){function i(e,n,t,i,a,o,s,u,l,c){if(!c){var f=s.originalPositionFor({line:e,column:n});u.equal(f.name,o,"Incorrect name, expected "+JSON.stringify(o)+", got "+JSON.stringify(f.name)),u.equal(f.line,i,"Incorrect line, expected "+JSON.stringify(i)+", got "+JSON.stringify(f.line)),u.equal(f.column,a,"Incorrect column, expected "+JSON.stringify(a)+", got "+JSON.stringify(f.column));var d;d=t&&s.sourceRoot&&0===t.indexOf(s.sourceRoot)?t:t?s.sourceRoot?r.join(s.sourceRoot,t):t:null,u.equal(f.source,d,"Incorrect source, expected "+JSON.stringify(d)+", got "+JSON.stringify(f.source))}if(!l){var p=s.generatedPositionFor({source:t,line:i,column:a});u.equal(p.line,e,"Incorrect line, expected "+JSON.stringify(e)+", got "+JSON.stringify(p.line)),u.equal(p.column,n,"Incorrect column, expected "+JSON.stringify(n)+", got "+JSON.stringify(p.column))}}function a(e,n,t){e.equal(n.version,t.version,"version mismatch"),e.equal(n.file,t.file,"file mismatch"),e.equal(n.names.length,t.names.length,"names length mismatch: "+n.names.join(", ")+" != "+t.names.join(", "));for(var r=0;r<n.names.length;r++)e.equal(n.names[r],t.names[r],"names["+r+"] mismatch: "+n.names.join(", ")+" != "+t.names.join(", "));e.equal(n.sources.length,t.sources.length,"sources length mismatch: "+n.sources.join(", ")+" != "+t.sources.join(", "));for(var r=0;r<n.sources.length;r++)e.equal(n.sources[r],t.sources[r],"sources["+r+"] length mismatch: "+n.sources.join(", ")+" != "+t.sources.join(", "));if(e.equal(n.sourceRoot,t.sourceRoot,"sourceRoot mismatch: "+n.sourceRoot+" != "+t.sourceRoot),e.equal(n.mappings,t.mappings,"mappings mismatch:\nActual:   "+n.mappings+"\nExpected: "+t.mappings),n.sourcesContent){e.equal(n.sourcesContent.length,t.sourcesContent.length,"sourcesContent length mismatch");for(var r=0;r<n.sourcesContent.length;r++)e.equal(n.sourcesContent[r],t.sourcesContent[r],"sourcesContent["+r+"] mismatch")}}var r=e("../../lib/source-map/util");n.testGeneratedCode=" ONE.foo=function(a){return baz(a);};\n TWO.inc=function(a){return a+1;};",n.testMap={version:3,file:"min.js",names:["bar","baz","n"],sources:["one.js","two.js"],sourceRoot:"/the/root",mappings:"CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA"},n.testMapWithSourcesContent={version:3,file:"min.js",names:["bar","baz","n"],sources:["one.js","two.js"],sourcesContent:[" ONE.foo = function (bar) {\n   return baz(bar);\n };"," TWO.inc = function (n) {\n   return n + 1;\n };"],sourceRoot:"/the/root",mappings:"CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA"},n.emptyMap={version:3,file:"min.js",names:[],sources:[],mappings:""},n.assertMapping=i,n.assertEqualMaps=a});